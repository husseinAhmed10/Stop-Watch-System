/*
 * mini_project_2.c
 *
 *  Created on: Apr 16, 2023
 *      Author: T.S
 */

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

unsigned char sec1 = 0;		 //-- -- -0
unsigned char sec2 = 0;		 //-- -- 0-
unsigned char min1 = 0;		 //-- -0 --
unsigned char min2 = 0;		 //-- 0- --
unsigned char hour1 = 0;	 //-0 -- --
unsigned char hour2 = 0;	 //0- -- --

#define appearance_delay 1

unsigned char resume_stop = 0;

void Timer1_init_CTC() {

	TIMSK = (1 << OCIE1A);	//enable compare mode

	TCNT1 = 0;	//start value of the timer

	//start counting up to OCR1A

	OCR1A = 15625;	//compare value of the timer using prescalar 1024

	TCCR1A |= (1 << FOC1A) | (1 << FOC1B);	//NON PWM

	/*
	 * FOC1A: waveform generation CTC mode
	 * CS12,CS10 for 1024 Prescalar
	 * 1024 -> compare value = 977 , 256 -> compare value = 3906 , 128 -> compare value = 7812.5
	 **/

	TCCR1B |= (1 << CS11) | (1 << CS10) | (1 << WGM12);

}

ISR (TIMER1_COMPA_vect) {

	sec1++;
	if (sec1 == 10) {
		sec1 = 0;
		sec2++;
	}
	if (sec2 == 6) {
		sec2 = 0;
		min1++;
	}
	if (min1 == 10) {
		min1 = 0;
		min2++;
	}
	if (min2 == 6) {
		hour2 = 0;
		hour1++;
	}
	if (hour1 == 10) {
		hour1 = 0;
		hour2++;
	}

}

//Reset button INT0

void INT0_init() {

	DDRD &= ~(1 << PD2);
	PORTD |= (1 << PD2);	//INTERNAL RESISTANCE
	GICR |= (1 << INT0);		//ENABLE INT0
	MCUCR |= (1 << ISC01);	//falling edge

}

ISR(INT0_vect) {

	sec1 = 0;		 //-- -- -0
	sec2 = 0;		 //-- -- 0-
	min1 = 0;		 //-- -0 --
	min2 = 0;		 //-- 0- --
	hour1 = 0;	 	 //-0 -- --
	hour2 = 0;		 //0- -- --

}

//Paused button INT1

void INT1_init() {

	DDRD &= ~(1 << PD3);
	GICR |= (1 << INT1);		//ENABLE INT1
	MCUCR |= (1 << ISC10) | (1 << ISC11);	//raising edge

}

ISR(INT1_vect) {

	PORTA = (PORTA & 0XF0) | (0X01 & 0x0F);
	PORTC = (PORTC & 0XF0) | (8 & 0x0F);

	//No clock (Timer Stopped)
	TCCR1B &= ~(1 << CS12) & ~(1 << CS11) & ~(1 << CS10);

}

void INT2_init() {

	DDRB &= ~(1 << PB2);
	PORTB |= (1 << PB2);	//INTERNAL RESISTANCE
	GICR |= (1 << INT2);		//ENABLE INT0
	MCUCSR &= ~(1 << ISC2);	//falling edge

}

//Resumed button INT2

ISR(INT2_vect) {

	//set the clock (The timer continue working)
	TCCR1B |= (1 << CS11) | (1 << CS10);

}

int main(void) {

	//Application Initialization
	DDRA = 0X3F;//set the pins for the enable and disable for each 7 segments
	DDRC = 0X3F;	//set the pins for the 7 segment appearance

	SREG |= (1 << 7);	//enable interrupts
	//Timer and interrupts Initialization
	Timer1_init_CTC();
	INT0_init();
	INT1_init();
	INT2_init();

	while (1) {
		//Application Code (i.e. StopWatch Time appears all the time)

		//enable the 7 segment required and appear the time
		PORTA = (PORTA & 0XF0) | (0X01 & 0x0F);
		PORTC = (PORTC & 0XF0) | (sec1 & 0x0F);
		_delay_ms(appearance_delay);
		//enable the 7 segment required and appear the time
		PORTA = (PORTA & 0XF0) | (0X02 & 0x0F);
		PORTC = (PORTC & 0XF0) | (sec2 & 0x0F);
		_delay_ms(appearance_delay);
		//enable the 7 segment required and appear the time
		PORTA = (PORTA & 0XF0) | (0X04 & 0x0F);
		PORTC = (PORTC & 0XF0) | (min1 & 0x0F);
		_delay_ms(appearance_delay);
		//enable the 7 segment required and appear the time
		PORTA = (PORTA & 0XF0) | (0X08 & 0x0F);
		PORTC = (PORTC & 0XF0) | (min2 & 0x0F);
		_delay_ms(appearance_delay);
		PORTA &= 0xF0;
		//enable the 7 segment required and appear the time
		PORTA = (PORTA & 0X0F) | (0X10 & 0xF0);
		PORTC = (PORTC & 0XF0) | (hour1 & 0x0F);
		_delay_ms(appearance_delay);
		//enable the 7 segment required and appear the time
		PORTA = (PORTA & 0X0F) | (0X20 & 0xF0);
		PORTC = (PORTC & 0XF0) | (hour2 & 0x0F);
		_delay_ms(appearance_delay);
		PORTA &= ~(1 << 4) & ~(1 << 5);



	}

	return 0;
}
